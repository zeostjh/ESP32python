import time
import machine
import micropython
import hcsr04
import network
import ConnectWifi
import socket

ConnectWifi.connect()

host ="192.168.1.96"
port =49280

ultrasonic = hcsr04.HCSR04(trigger_pin=12, echo_pin=13)
A_b = machine.Pin(4, machine.Pin.OUT)
A_g = machine.Pin(2, machine.Pin.OUT)
A_r = machine.Pin(15, machine.Pin.OUT)
B_b = machine.Pin(19, machine.Pin.OUT)
B_g = machine.Pin(18, machine.Pin.OUT)
B_r = machine.Pin(5, machine.Pin.OUT)
C_b = machine.Pin(23, machine.Pin.OUT)
C_g = machine.Pin(22, machine.Pin.OUT)
C_r = machine.Pin(21, machine.Pin.OUT)
while True:
    distance = ultrasonic.distance_cm()
    print('Distance:', distance, 'cm', '|', distance/2.54, 'inch', '|', distance/30.48, 'feet')
    if distance < 0:  #unzero timeout
        A_r.on()
        A_g.on()
        A_b.off()
        B_r.on()
        B_g.on()
        B_b.off()
        C_r.on()
        C_g.on()
        C_b.off()
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((host,port))
        s.sendall("set MIXER:Current/InCh/Fader/Level 0 0 -32768\n".encode())
        s.recv(1500)
        s.close ()
        time.sleep(0.5)
    elif distance <= 60:    #20"
        A_r.on()
        A_g.off()
        A_b.on()
        B_r.on()
        B_g.off()
        B_b.on()
        C_r.on()
        C_g.off()
        C_b.on()
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((host,port))
        s.sendall("set MIXER:Current/InCh/Fader/Level 0 0 0\n".encode())
        s.recv(1500)
        s.close ()
        time.sleep(0.5)
    elif distance <= 102:  #40" 
        A_r.on()
        A_g.off()
        A_b.on()
        B_r.on()
        B_g.off()
        B_b.on()
        C_r.on()
        C_g.on()
        C_b.on()
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((host,port))
        s.sendall("set MIXER:Current/InCh/Fader/Level 0 0 -500\n".encode())
        s.recv(1500)
        s.close ()
        time.sleep(0.5)
    elif distance <= 152:  #60"
        A_r.on()
        A_g.off()
        A_b.on()
        B_r.on()
        B_g.on()
        B_b.on()
        C_r.on()
        C_g.on()
        C_b.on()
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((host,port))
        s.sendall("set MIXER:Current/InCh/Fader/Level 0 0 -2000\n".encode())
        s.recv(1500)
        s.close ()
        time.sleep(0.5)
    elif distance <= 203:  #80"
        A_r.off()
        A_g.on()
        A_b.on()
        B_r.off()
        B_g.on()
        B_b.on()
        C_r.off()
        C_g.on()
        C_b.on()
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((host,port))
        s.sendall("set MIXER:Current/InCh/Fader/Level 0 0 -3000\n".encode())
        s.recv(1500)
        s.close ()
        time.sleep(0.5)
    elif distance <= 254:  #100"
        A_r.off()
        A_g.on()
        A_b.on()
        B_r.off()
        B_g.on()
        B_b.on()
        C_r.on()
        C_g.on()
        C_b.on()
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((host,port))
        s.sendall("set MIXER:Current/InCh/Fader/Level 0 0 -4000\n".encode())
        s.recv(1500)
        s.close ()
        time.sleep(0.5)
    elif distance <= 305:  #120"
        A_r.off()
        A_g.on()
        A_b.on()
        B_r.on()
        B_g.on()
        B_b.on()
        C_r.on()
        C_g.on()
        C_b.on()
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((host,port))
        s.sendall("set MIXER:Current/InCh/Fader/Level 0 0 -5000\n".encode())
        s.recv(1500)
        s.close ()
        time.sleep(0.5)
    elif distance > 306:  #120"
        A_r.on()
        A_g.on()
        A_b.off()
        B_r.on()
        B_g.on()
        B_b.off()
        C_r.on()
        C_g.on()
        C_b.off()
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((host,port))
        s.sendall("set MIXER:Current/InCh/Fader/Level 0 0 -32768\n".encode())
        s.recv(1500)
        s.close ()
        time.sleep(0.5)


